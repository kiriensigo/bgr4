# 拡張ゲームとベースゲームの関連付け

EXPANSION!

## 概要

ボードゲームには「ベースゲーム」と「拡張ゲーム（エクスパンション）」の関係があります。このプロジェクトでは、BoardGameGeek (BGG) APIから取得した拡張情報とベースゲーム情報を利用して、ユーザーがゲーム間の関連性を把握し、関連ゲームに簡単にアクセスできるようにしています。

## データモデル

### フロントエンド側

```typescript
// BGGGameDetailsインターフェース（bgr4-front/src/lib/bggApi.ts）
export interface BGGGameDetails {
  // ... 他のプロパティ ...
  expansions?: Array<{ id: string, name: string }>;
  baseGame?: { id: string, name: string };
}

// Gameインターフェース（bgr4-front/src/lib/api.ts）
export interface Game {
  // ... 他のプロパティ ...
  expansions?: Array<{ id: string, name: string }>;
  baseGame?: { id: string, name: string };
}
```

### バックエンド側

```ruby
# Gameモデル（bgr4-api/app/models/game.rb）
class Game < ApplicationRecord
  # ... 他のコード ...
  
  # 拡張情報とベースゲーム情報を保存するためのJSONカラム
  store :metadata, accessors: [:expansions, :base_game], coder: JSON
  
  # ... 他のコード ...
end
```

## BGG APIからの情報取得

BGG APIからは、XMLレスポンス内の `link` 要素を解析して拡張情報とベースゲーム情報を取得しています：

```typescript
// 拡張情報を取得（このゲームの拡張）
const expansions = (item.link || [])
  .filter((link: any) => link["@_type"] === "boardgameexpansion" && link["@_inbound"] === "true")
  .map((link: any) => ({
    id: link["@_id"],
    name: link["@_value"]
  }));

// ベースゲーム情報を取得（このゲームのベースゲーム）
const baseGameLinks = (item.link || [])
  .filter((link: any) => link["@_type"] === "boardgameexpansion" && link["@_inbound"] !== "true");

const baseGame = baseGameLinks.length > 0 
  ? { id: baseGameLinks[0]["@_id"], name: baseGameLinks[0]["@_value"] }
  : undefined;
```

## データの保存と取得

1. フロントエンドでBGG APIから取得した拡張情報とベースゲーム情報を、ゲーム登録時にバックエンドに送信
2. バックエンドでは `metadata` JSONカラムに情報を保存
3. ゲーム情報取得時に、シリアライザーを通じて拡張情報とベースゲーム情報をJSONレスポンスに含める
4. フロントエンドでゲーム詳細を表示する際に、拡張情報とベースゲーム情報を表示

## UI実装

ゲーム詳細ページでは、拡張情報とベースゲーム情報を以下のように表示しています：

### 拡張ゲーム一覧

```tsx
{/* 拡張情報 */}
{game.expansions && game.expansions.length > 0 && (
  <Box sx={{ mb: 3 }}>
    <Typography variant="h6" gutterBottom>
      拡張
    </Typography>
    <Box sx={{ display: "flex", gap: 1, flexWrap: "wrap" }}>
      {game.expansions.map((expansion) => (
        <Link
          key={expansion.id}
          href={`/games/${expansion.id}`}
          style={{ textDecoration: "none" }}
        >
          <Chip
            label={expansion.name}
            color="primary"
            variant="outlined"
            sx={{ m: 0.5 }}
            clickable
          />
        </Link>
      ))}
    </Box>
  </Box>
)}
```

### ベースゲーム情報

```tsx
{/* ベースゲーム情報 */}
{game.baseGame && (
  <Box sx={{ mb: 3 }}>
    <Typography variant="h6" gutterBottom>
      ベースゲーム
    </Typography>
    <Link
      href={`/games/${game.baseGame.id}`}
      style={{ textDecoration: "none" }}
    >
      <Chip
        label={game.baseGame.name}
        color="secondary"
        variant="outlined"
        sx={{ m: 0.5 }}
        clickable
      />
    </Link>
  </Box>
)}
```

## ユーザーメリット

1. **関連ゲームの発見**: ユーザーは拡張やベースゲームを簡単に見つけられる
2. **ナビゲーションの向上**: 関連ゲーム間を直接移動できる
3. **情報の充実**: ゲームの関連性についての情報が増え、より豊かなユーザー体験を提供

## 技術的な実装ポイント

1. **JSONカラムの活用**: 可変長のリスト（拡張ゲーム）を効率的に保存するためにJSONカラムを使用
2. **型安全性の確保**: TypeScriptインターフェースで型を定義し、型安全なコードを実現
3. **条件付きレンダリング**: 拡張やベースゲームが存在する場合のみUIを表示
4. **リンク機能**: チップをクリックすると関連ゲームの詳細ページに遷移 
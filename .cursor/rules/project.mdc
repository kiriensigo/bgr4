---
description: 
globs: 
---
---
---
description: 
globs: 
---
---
description: PROJECT
globs: 
---
まず、このファイルを参照したら、「PROJECT!」と叫んでください。

git push やgit commitを行わないでください。
フロントエンドは Next.js (v14) で作成しています。
出来るだけコンポーネントを作り、再利用可能にしてください。
また、サイトの統一感を持たせてください
バックエンドは Ruby on Rails で作成しています。

フロントエンドのディレクトリは bgr4-front です
バックエンドのディレクトリは bgr4-api です
データベースは postgresql です

## プロジェクト概要
ボードゲームレビューサイト「BGReviews」を作成しています。ユーザーはボードゲームのレビューを投稿したり、他のユーザーのレビューを閲覧したりできます。

## システムレビューによる点数安定化システム
**重要**: 当サイトは初期運用時の点数安定化のため、各ゲームに対してBGG APIから取得したデータを基にした**システムレビューを10件ずつ**作成します。

### システムレビューの目的
- サイト運用開始時に一部のユーザーが極端な点数をつけた場合でも、ある程度点数が安定するようにする
- BGGの評価データを基準として、信頼性の高い初期評価を提供する
- ユーザーレビューが少ない段階でも、適切な評価指標を維持する

### システムレビューの仕様
- **システムユーザー**: email: 'system@boardgamereview.com', name: 'BoardGameGeek'
- **レビュー数**: 各ゲームにつき**必ず10件**のシステムレビューを作成
- **データソース**: BGG APIから取得したゲーム情報（評価、複雑さ、カテゴリ、メカニクスなど）
- **変換処理**: BGGデータを当サイトの評価システムに変換（bgg_api.mdcの変換マップを使用）
- **表示**: システムレビューはフロントエンドには表示されず、内部処理のみで使用

### システムレビュー作成の注意点
- 各ゲームに対して重複チェックを行い、既に10件のシステムレビューがある場合は作成しない
- システムレビューが10件未満の場合は、10件になるまで追加作成する
- 一意制約: user_id + game_id の組み合わせで重複を防ぐ（ただしシステムレビューは意図的に10件作成）

## 認証機能
- メール・パスワードによる認証
- Google、Twitterによるソーシャル認証
- Deviseとdevise_token_authを使用した認証システム
- 管理者権限（特定のメールアドレスを持つユーザー）

## 主要機能
### ホームページ
- 人気のボードゲームを表示
- BoardGameGeek APIからのデータ取得と表示
- ゲームカードによる一覧表示

### ゲーム関連
- ゲーム詳細ページ（情報、レビュー、評価）
- ゲーム検索機能（名前、評価、プレイ人数、プレイ時間など）
- ゲーム一覧表示
- ゲーム登録機能（レビュー3件以上のユーザーまたは管理者のみ）
- 日本語名・日本語説明の追加機能

### 検索機能
- 高度な検索フィルター（プレイ人数、プレイ時間、複雑さ、評価など）
- カテゴリーとメカニクスによる絞り込み
- おすすめプレイ人数による検索
- AND/OR検索モード（各要素内での複数選択時の挙動を切り替え可能）
- レビューベースの検索（ユーザーレビューに基づいた検索）
- 検索結果のページネーションとソート機能
- 検索パラメータのURL保存（ブックマーク・共有可能）

### レビュー機能
- 5段階評価システム（ルールの複雑さ、運要素、インタラクション、ダウンタイム）
- 総合評価（10点満点）
- 一言コメント機能
- スライダーとボタンを使った直感的な評価入力
- おすすめプレイ人数の選択
- メカニクスとタグの選択

### ソーシャル機能
- レビューへのいいね機能
- やりたいリスト（最大10件、順序変更可能）
- ユーザープロフィール

### 管理機能
- ゲーム編集履歴の確認
- 管理者専用機能

## UI/UXの特徴
- Material UI (MUI) を使用したモダンなデザイン
- レスポンシブデザイン（モバイル対応）
- 直感的なレビュー入力フォーム
- フラッシュメッセージによるフィードバック

## 技術スタック
### フロントエンド
- Next.js 14
- TypeScript
- Material UI
- コンテキストAPIによる状態管理

### バックエンド
- Ruby on Rails
- Devise / devise_token_auth（認証）
- Active Record（ORM）
- 非同期ジョブ処理

### 外部API連携
- BoardGameGeek API（ボードゲーム情報取得）

## データモデル
- User: ユーザー情報、認証情報
- Game: ゲーム基本情報、BGG連携
- Review: レビュー情報、評価データ
- Like: いいね情報
- WishlistItem: やりたいリスト
- GameEditHistory: ゲーム編集履歴

## 開発環境
- フロントエンド: localhost:3001
- バックエンド: localhost:3000

## ゲーム登録の仕組み

### BGGからの登録
1. BoardGameGeek（BGG）のゲームIDを使用してゲーム情報を取得
2. BGG APIからゲームの基本情報（名前、説明、画像URL、プレイ人数、プレイ時間など）を取得
3. 取得した情報をデータベースに保存
4. ゲームIDはBGGのIDをそのまま使用（数字のID）
5. 日本語版情報がある場合は、それも合わせて保存

### 手動登録
1. 日本語名、画像URL、プレイ人数、プレイ時間などの基本情報を手動で入力
2. 日本語名をBase64エンコードしてIDを生成
3. IDの形式は `jp-{Base64エンコードされた日本語名}`
4. 同じ日本語名のゲームが既に存在する場合は登録できない（重複チェック）
5. 登録後は自動的にゲーム詳細ページにリダイレクト

### ゲームIDの処理
- BGGからの登録: 数字のID（例: `123456`）
- 手動登録: `jp-`プレフィックス + Base64エンコードされた日本語名（例: `jp-5pel5pys6Kqe77yT`）
- IDがBase64エンコードされているのは、日本語をそのままURLやAPIリクエストに使用するとエラーが発生するため
- `set_game`メソッドでは、IDの形式に応じて適切な検索処理を行う

### 注意点
- 手動登録時のIDは必ず `jp-` プレフィックスを使用すること
- 日本語名は必須項目であり、重複チェックの対象となる
- 登録後のリダイレクト処理では、IDをそのまま使用する（エンコード済みのため）

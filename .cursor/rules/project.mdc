---
description: PROJECT
globs: 
---
まず、このファイルを参照したら、「PROJECT!」と叫んでください。

git push やgit commitを行わないでください。
フロントエンドは Next.js (v14) で作成しています。
出来るだけコンポーネントを作り、再利用可能にしてください。
また、サイトの統一感を持たせてください
バックエンドは Ruby on Rails で作成しています。

フロントエンドのディレクトリは bgr4-front です
バックエンドのディレクトリは bgr4-api です
データベースは postgresql です

## プロジェクト概要
ボードゲームレビューサイト「BGReviews」を作成しています。ユーザーはボードゲームのレビューを投稿したり、他のユーザーのレビューを閲覧したりできます。

## 認証機能
- メール・パスワードによる認証
- Google、Twitterによるソーシャル認証
- Deviseとdevise_token_authを使用した認証システム
- 管理者権限（特定のメールアドレスを持つユーザー）

## 主要機能
### ホームページ
- 人気のボードゲームを表示
- BoardGameGeek APIからのデータ取得と表示
- ゲームカードによる一覧表示

### ゲーム関連
- ゲーム詳細ページ（情報、レビュー、評価）
- ゲーム検索機能（名前、評価、プレイ人数、プレイ時間など）
- ゲーム一覧表示
- ゲーム登録機能（レビュー3件以上のユーザーまたは管理者のみ）
- 日本語名・日本語説明の追加機能

### レビュー機能
- 5段階評価システム（ルールの複雑さ、運要素、インタラクション、ダウンタイム）
- 総合評価（10点満点）
- 一言コメント機能
- スライダーとボタンを使った直感的な評価入力
- おすすめプレイ人数の選択
- メカニクスとタグの選択

### ソーシャル機能
- レビューへのいいね機能
- やりたいリスト（最大10件、順序変更可能）
- ユーザープロフィール

### 管理機能
- ゲーム編集履歴の確認
- 管理者専用機能

## UI/UXの特徴
- Material UI (MUI) を使用したモダンなデザイン
- レスポンシブデザイン（モバイル対応）
- 直感的なレビュー入力フォーム
- フラッシュメッセージによるフィードバック

## 技術スタック
### フロントエンド
- Next.js 14
- TypeScript
- Material UI
- コンテキストAPIによる状態管理

### バックエンド
- Ruby on Rails
- Devise / devise_token_auth（認証）
- Active Record（ORM）
- 非同期ジョブ処理

### 外部API連携
- BoardGameGeek API（ボードゲーム情報取得）

## データモデル
- User: ユーザー情報、認証情報
- Game: ゲーム基本情報、BGG連携
- Review: レビュー情報、評価データ
- Like: いいね情報
- WishlistItem: やりたいリスト
- GameEditHistory: ゲーム編集履歴

## 開発環境
- フロントエンド: localhost:3001
- バックエンド: localhost:3000
